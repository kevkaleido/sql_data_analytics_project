/*
                                                  ===============================================================================
                                                              BASIC DATA EXPLORATION & BUSINESS METRICS ANALYSIS
                                                 ===============================================================================

Purpose: Get to know the data and answer fundamental business questions like
         "How much did we sell?", "Who are the customers?", and "What products work best?"

What this script does:
- Explores what countries customers come from and what products are sold
- Calculates basic business numbers (total sales, number of orders, customer count)
- Finds oldest/youngest customers and first/last order dates
- Shows customer breakdown by country and gender
- Identifies best and worst selling products
- Discovers which customers spend the most money
- Analyzes sales distribution across different regions

Key Functions Used:
- SUM, COUNT, AVG (calculate totals, counts, and averages)
- MIN, MAX (find earliest/latest dates and age ranges)
- DISTINCT (identify unique values like countries and categories)
- GROUP BY (break down data by categories like gender, country)
- JOIN (combine customer, product, and sales data)
- ORDER BY (rank products and customers by performance)
- TOP N (find best and worst performers)

Tables analyzed: Customer info, Product catalog, Sales transactions
===============================================================================
                                                                                                                                                                               */





--Explore all countries our customers come from 

SELECT DISTINCT country
FROM gold.dim_customers





--Explore all Product categories "The Major Divisions"

SELECT DISTINCT category,subcategory, product_name
FROM gold.dim_products





--Find the date of the first and last order
--And how many years of sales are available?

SELECT 
MIN(order_date) first_order_date,
MAX(order_date) last_order_date,
DATEDIFF(year, MIN(order_date), MAX(order_date)) years_of_sale
FROM gold.fact_sales





--Find the youngest and oldest customer

SELECT 
MIN(birthdate) oldest_birthdate,
DATEDIFF(year, MIN(birthdate), GETDATE()) oldest_age,
MAX(birthdate) youngest_birthdate,
DATEDIFF(year, MAX(birthdate), GETDATE()) youngest_age
FROM gold.dim_customers




--Find the Total Sales
--Find how many items are sold
--Find the average selling price
--Find the total number of orders
--Find the total number of products
--Find the total number of customers
--Find the total number of customers that has placed an order


SELECT 
	SUM(sales_amount) total_sale,
	SUM(quantity) items_sold,
	AVG(price) average_price,
	COUNT(DISTINCT order_number) total_orders,
	(SELECT COUNT(product_key) FROM gold.dim_products) total_product_number,
	(SELECT COUNT(customer_key) FROM gold.dim_customers) total_customer_number,
	(SELECT COUNT(customer_key) FROM gold.dim_customers WHERE customer_key IN (SELECT customer_key FROM gold.fact_sales)) customers_that_placed_order
FROM gold.fact_sales 


OR

SELECT 'Total Sales' measure_name, SUM(sales_amount) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Items Sold' measure_name,  SUM(quantity) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' measure_name, AVG(price) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders' measure_name, COUNT(DISTINCT order_number) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Number of Products' measure_name, COUNT(product_key) measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Number of Customers' measure_name, COUNT(customer_key) measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Total Number of Customers that placed orders' measure_name, COUNT(customer_key) measure_value FROM gold.dim_customers WHERE customer_key IN (SELECT customer_key FROM gold.fact_sales)





--Find total customers by countries
	SELECT 
	country,
	COUNT(customer_key) total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

--find total customers by gender
	SELECT 
	gender,
	COUNT(customer_key) total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC


--find total products by category 
	SELECT category,
	COUNT(product_name) total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC


--what is the average cost in each category
	SELECT category,
	AVG(cost) avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC


--what is the total revenue generated by each category
	SELECT dp.category, SUM(fs.sales_amount) total_revenue
	FROM  gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON dp.product_key = fs.product_key
GROUP BY dp.category
ORDER BY total_revenue DESC


--find total revenue generated by each customer

SELECT 
	dc.customer_key, dc.first_name, dc.last_name,
	SUM(fs.sales_amount) total_revenue
	FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc
ON dc.customer_key = fs.customer_key
GROUP BY dc.customer_key, dc.first_name, dc.last_name
ORDER BY total_revenue DESC


--what is the distribution of sold items across countries

SELECT 
	dc.country,
	SUM(fs.quantity) sold_items
	FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc
ON fs.customer_key = dc.customer_key
GROUP BY dc.country
ORDER BY sold_items DESC







--Which five products generate the highest revenue

SELECT TOP 5
	dp.product_name,
	SUM(fs.sales_amount) revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON fs.product_key = dp.product_key
GROUP BY dp.product_name
ORDER BY revenue DESC

--using the rank window function

SELECT *
FROM 
	(SELECT
		dp.product_name,
		SUM(fs.sales_amount) revenue,
		ROW_NUMBER() OVER (ORDER BY SUM(fs.sales_amount) DESC) rank 
	FROM gold.fact_sales fs
	LEFT JOIN gold.dim_products dp
	ON fs.product_key = dp.product_key
	GROUP BY dp.product_name) sub
WHERE rank < 6



--what are the five worst performing products in terms of sales

SELECT TOP 5
dp.product_name,
SUM(fs.sales_amount) revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON fs.product_key = dp.product_key
GROUP BY dp.product_name
ORDER BY revenue ASC


--Which five subcategories generate the highest revenue

SELECT TOP 5
dp.subcategory,
SUM(fs.sales_amount) revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON fs.product_key = dp.product_key
GROUP BY dp.subcategory
ORDER BY revenue DESC



--what are the five worst performing subcategories in terms of sales

SELECT TOP 5
dp.subcategory,
SUM(fs.sales_amount) revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON fs.product_key = dp.product_key
GROUP BY dp.subcategory
ORDER BY revenue ASC



--find the top 10 customers who have generated the highest revenue

SELECT TOP 10
	dc.customer_id,
	dc.first_name,
	dc.last_name,
SUM(fs.sales_amount) revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc
ON fs.customer_key = dc.customer_key
GROUP BY dc.customer_id,
dc.first_name,
dc.last_name
ORDER BY revenue DESC

--using rank window function
SELECT *
FROM(
	SELECT 
		dc.customer_id,
		dc.first_name,
		dc.last_name,
	SUM(fs.sales_amount) revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(fs.sales_amount) DESC) customer_rank
	FROM gold.fact_sales fs
	LEFT JOIN gold.dim_customers dc
	ON fs.customer_key = dc.customer_key
	GROUP BY dc.customer_id,
	dc.first_name,
	dc.last_name)sub
WHERE customer_rank < 11



--and 3 customers with the fewest orders placed
SELECT TOP 3
	dc.customer_id,
	dc.first_name,
	dc.last_name,
COUNT(DISTINCT fs.order_number) no_of_orders
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc
ON fs.customer_key = dc.customer_key
GROUP BY dc.customer_id,
dc.first_name,
dc.last_name
ORDER BY no_of_orders ASC




